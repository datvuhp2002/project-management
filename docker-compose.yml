version: "3.8"

services:
  # MongoDB Replica Set
  mongo1:
    image: mongo:4.4
    volumes:
      - mongo-data1:/data/db
      - ./rs-init.sh:/scripts/rs-init.sh
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: prisma
      MONGO_REPLICA_HOST: host.docker.internal
    networks:
      - kafka-network
    ports:
      - "27021:27017"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs"]
    restart: always

  mongo2:
    image: mongo:4.4
    volumes:
      - mongo-data2:/data/db
    networks:
      - kafka-network
    ports:
      - "27022:27017"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs"]
    restart: always

  mongo3:
    image: mongo:4.4
    volumes:
      - mongo-data3:/data/db
    networks:
      - kafka-network
    ports:
      - "27023:27017"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs"]
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "5600:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - kafka-network
    deploy:
      replicas: 1
    restart: always

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/data
    networks:
      - kafka-network
    deploy:
      replicas: 1
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network
    deploy:
      replicas: 1
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network
    deploy:
      replicas: 1
    restart: always

  debezium:
    image: quay.io/debezium/connect:2.0
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    depends_on:
      - kafka
    networks:
      - kafka-network
    deploy:
      replicas: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network
    deploy:
      replicas: 1
    restart: always

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    image: datvudinhtrong/gateway
    ports:
      - "3050:3050"
    environment:
      - PORT=3050
      - REQUEST_URL=http://gateway:3050
      - USER_SERVICES_REQUEST_URL=http://userservices:3056/services/api/user
      - DEPARTMENT_SERVICES_REQUEST_URL=http://departmentservices:3057/services/api/department
      - ASSIGNMENT_SERVICES_REQUEST_URL=http://assignmentservices:3058/services/api/assignment
      - PROJECT_SERVICES_REQUEST_URL=http://projectservices:3059/services/api/project
      - TASK_SERVICES_REQUEST_URL=http://taskservices:3060/services/api/task
      - ACTIVITY_SERVICES_REQUEST_URL=http://activityservices:3061/services/api/activity
      - EMAIL_SERVICES_REQUEST_URL=http://emailservices:3069/services/api/email
      - UPLOAD_SERVICES_REQUEST_URL=http://uploadservices:3068/services/api/upload
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - PUBLIC_KEY=abcdefgh123
      - PRIVATE_KEY=12345678abc
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/gateway:/app/src/logs
    depends_on:
      - userservices
      - projectservices
      - assignmentservices
      - activityservices
      - departmentservices
      - taskservices
    networks:
      - kafka-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.env == production
      restart_policy:
        condition: on-failure

  userservices:
    build:
      context: ./userservices
      dockerfile: Dockerfile
    image: datvudinhtrong/userservices
    environment:
      - PORT=3056
      - CLOUDINARY_API_SECRET=Ec2Fdj1v2voufkhhkX-CkhOZnj8
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/userService?replicaSet=dbrs
      - GRPC_PORT=50053
      - ASSIGNMENT_GRPC_PORT=assignmentservices:50056
      - DEPARTMENT_GRPC_PORT=departmentservices:50059
      - UPLOAD_GRPC_PORT=uploadservices:50057
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/userservices:/app/src/logs
    ports:
      - "3056:3056"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  departmentservices:
    build:
      context: ./departmentservices
      dockerfile: Dockerfile
    image: datvudinhtrong/departmentservices
    environment:
      - PORT=3057
      - GRPC_PORT=50059
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/departmentService?replicaSet=dbrs
      - USER_GRPC_PORT=userservices:50053
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/departmentservices:/app/src/logs
    ports:
      - "3057:3057"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  assignmentservices:
    build:
      context: ./assignmentservices
      dockerfile: Dockerfile
    image: datvudinhtrong/assignmentservices
    environment:
      - PORT=3058
      - GRPC_PORT=50056
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/assignmentService?replicaSet=dbrs
      - USER_GRPC_PORT=userservices:50053
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/assignmentservices:/app/src/logs
    ports:
      - "3058:3058"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  projectservices:
    build:
      context: ./projectservices
      dockerfile: Dockerfile
    image: datvudinhtrong/projectservices
    environment:
      - PORT=3059
      - GRPC_PORT=50054
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/projectService?replicaSet=dbrs
      - USER_GRPC_PORT=userservices:50053
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/projectservices:/app/src/logs
    ports:
      - "3059:3059"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  taskservices:
    build:
      context: ./taskservices
      dockerfile: Dockerfile
    image: datvudinhtrong/taskservices
    environment:
      - PORT=3060
      - GRPC_PORT=50055
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/taskService?replicaSet=dbrs
      - USER_GRPC_PORT=userservices:50053
      - PROJECT_GRPC_PORT=projectservices:50054
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/taskservices:/app/src/logs
    ports:
      - "3060:3060"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  activityservices:
    build:
      context: ./activityservices
      dockerfile: Dockerfile
    image: datvudinhtrong/activityservices
    environment:
      - PORT=3061
      - GRPC_PORT=50061
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/activityService?replicaSet=dbrs
      - USER_GRPC_PORT=userservices:50053
      - PROJECT_GRPC_PORT=projectservices:50054
      - ASSIGNMENT_GRPC_PORT=assignmentservices:50056
      - TASK_GRPC_PORT=taskservices:50055
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/activityservices:/app/src/logs
    ports:
      - "3061:3061"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  emailservices:
    build:
      context: ./emailservices
      dockerfile: Dockerfile
    image: datvudinhtrong/emailservices
    environment:
      - PORT=3069
      - KAFKA_BROKER=kafka:9092
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/emailservices:/app/src/logs
    ports:
      - "3069:3069"
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  uploadservices:
    build:
      context: ./uploadservices
      dockerfile: Dockerfile
    image: datvudinhtrong/uploadservices
    environment:
      - PORT=3068
      - KAFKA_BROKER=kafka:9092
      - CLOUDINARY_API_SECRET=Ec2Fdj1v2voufkhhkX-CkhOZnj8
      - LOKI_HOST=http://loki:3100
    volumes:
      - ./logs/uploadservices:/app/src/logs
    ports:
      - "3068:3068"
    networks:
      - kafka-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

volumes:
  mongo-data1:
  mongo-data2:
  mongo-data3:
  grafana-data:
  loki-data:

networks:
  kafka-network:
    driver: overlay
